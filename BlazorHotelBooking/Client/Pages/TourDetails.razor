@page "/tours/{id}"
@using BlazorHotelBooking.Shared;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Http;
@using Syncfusion.Blazor.DropDowns;
@using System.ComponentModel.DataAnnotations;
@using System.Security.Claims
@inject IHttpContextAccessor httpContextAccessor
@inject HttpClient http
@inject NavigationManager NavigationManager
@attribute [Authorize]


<div class="media">
    <div class="media-body">
        <h2 class="mb-0">@selectedTour.Name</h2>
        <p>@selectedTour.Description</p>
        <p>Max Number of Guests: @selectedTour.MaxNumberOfGuests</p>
        <h4 class="price">
            @selectedTour.Cost
        </h4>
        <button @onclick="ShowBookingForm" class="btn btn-primary"><i class="oi oi-cart">&nbsp;&nbsp;&nbsp; Book Tour</i></button>
    </div>
</div>

@if(showBookingForm)
{
    <div class="backgroundPopupBox">
        <div class="popupCreate">
            <EditForm Model=@newBooking OnValidSubmit=BookTour>
                <DataAnnotationsValidator />
                <ValidationSummary />
               
                <div class="form-group">
                    <label class="control-label">Commencement Date</label>
                    <InputDate @bind-Value="newBooking.CommencementDate" min="@min" max="@max" Placeholder="Enter Date" />
                    <ValidationMessage For="@(() => newBooking.CommencementDate)" />
                </div>
                <div class="form-group mt-3">
                    <label class="control-label">Number of guests</label>
                    <InputNumber id="NumOfGuests" @bind-Value="newBooking.NumberOfPeople" class="form-control" />
                    <ValidationMessage For="@(() => newBooking.NumberOfPeople)" />
                </div>

                @{
                    newBooking.TotalPrice = selectedTour.Cost;
                    newBooking.DepositAmountPaid = newBooking.TotalPrice / 5;
                    newBooking.EndDate = newBooking.CommencementDate.AddDays(selectedTour.DurationInDays - 1);
                }

                    
                
                <div>Tour start Date: @newBooking.CommencementDate.ToString("dd/MM/yyyy")</div>
                <div>Tour End Date: @newBooking.EndDate.ToString("dd/MM/yyyy")</div>


                <div>Total Price is £@newBooking.TotalPrice</div>
                <div>Total to pay today (20%) £@newBooking.DepositAmountPaid</div>


                @if(showOverlap)
                {
                    <div class="alert alert-danger" role="alert">
                        <p>There are no more spaces left in this tour for that many people on these dates please select new dates or less people.</p>
                    </div>
                }

                <button type="button" class="btn btn-success" @onclick="BookTour">Book</button>

            </EditForm>

            <div class="form-group">
                <button class="btn btn-danger" @onclick="ClosePopup">Cancel</button>
            </div>
        </div>
    </div>

}


@code {
    private Tour selectedTour = new Tour();
    private TourBooking newBooking = new TourBooking();
    private bool showBookingForm = false;
    private string min;
    private string max;
    private string userId;
    private int numOfOverlap;
    private bool showOverlap = false;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [Parameter]
    public string? Id { get; set; }

    List<Tour> tours = new List<Tour>();

    protected override async Task OnInitializedAsync()
    {
        min = DateOnly.FromDateTime(DateTime.Now.Date.AddMonths(2)).ToString("yyyy-MM-dd");
        max = DateOnly.FromDateTime(DateTime.Now.Date.AddYears(5)).ToString("yyyy-MM-dd");

        var authState = await authenticationState;
        var user = authState?.User;
        userId = user?.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        var result = await http.GetFromJsonAsync<List<Tour>>("/api/tour");
        if (result != null)
        {
            tours = result;
        }

        selectedTour = tours.FirstOrDefault(h => h.Id == Int32.Parse(Id));
    }

    private void ShowBookingForm()
    {
        showBookingForm = true;
    }

    async Task BookTour()
    {

        // Need to change for tours 

        // code to check if the newbooking overlaps with existing bookings
        numOfOverlap = await http.GetFromJsonAsync<int>($"/api/bookings/tour/overlap?start={newBooking.CommencementDate}&end={newBooking.EndDate}&tourId={selectedTour.Id}");

        if (selectedTour.MaxNumberOfGuests < numOfOverlap + newBooking.NumberOfPeople)
        {
            showOverlap = true;
        } 
        else 
        {
            newBooking.TourId = selectedTour.Id;
            newBooking.UserId = userId;
            newBooking.PaymentDueDate = newBooking.CommencementDate.AddDays(-28);

            

           await http.PostAsJsonAsync("/api/bookings/tour/book", newBooking);

            ClosePopup();
            NavigationManager.NavigateTo("/mybookings");
        }
    }

    private void ClosePopup()
    {
        showBookingForm = false;
    }
 }
