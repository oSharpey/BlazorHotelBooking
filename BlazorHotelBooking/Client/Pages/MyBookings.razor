@page "/mybookings"
@using BlazorHotelBooking.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject HttpClient http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@attribute [Authorize]

<h2>Hotels</h2>
@if (hotelBookings is null)
{
    <h3>Loading Hotels…</h3>
 
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Hotel</th>
                <th>Room Type</th>
                <th>Check In Date</th>
                <th>Check Out Date</th>
                <th>Number of Nights</th>
                <th>Amount Paid so Far</th>
                <th>Total Cost</th>
                <th>Payment Due Date</th>
            </tr>

        </thead>
        <tbody>
            @foreach (var h in hotelBookings)
            {

                if(!h.IsCancelled)
                {
                    disableCancel = false;
                    disableModify = false;
             

                    var today = DateTime.Now;
                    var datediff = h.CheckIn - today;
                    if (datediff.Days < 5)
                    {
                        disableCancel = true;
                    }

                    if(datediff.Days < 14)
                    {
                        disableModify = true;
                    }

               
                    <tr>
                        <td width="5%">@h.hotelName</td>
                        <td width="5%">@h.RoomType Room</td>
                        <td width="5%">@h.CheckIn.ToString("dd/MM/yyyy")</td>
                        <td width="5%">@h.CheckOut.ToString("dd/MM/yyyy")</td>
                        <td width="5%">@h.NumberOfNights Nights</td>
                        <td width="5%">£@h.DepositAmountPaid</td>
                        <td width="5%">£@h.TotalPrice</td>
                        <td width="5%">@h.CheckIn.AddDays(-28).ToString("dd/MM/yyyy")</td>
                        <td width="5%">
                            <button class="btn btn-primary" disabled="@disableModify" @onclick="() => ModifyBooking(h.bookingId)">Modify</button>
                        </td>
                        <td width="5%">
                            <button class="btn btn-danger" disabled="@disableCancel" @onclick="() => CancelBooking(h.bookingId)">Cancel</button>
                        </td>
                        <td width="5%">
                            @* Need to fix this so you can only pay in full up to 28 days then it gets cancelled *@
                            <button class="btn btn-success" disabled="@h.paidInfull" @onclick="() => ShowPayPopup(h.bookingId, h.DepositAmountPaid, h.TotalPrice)">Pay Remainder</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>


    <h3>Cancelled Hotels for late payment</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Hotel</th>
                <th>Room Type</th>
                <th>Check In Date</th>
                <th>Check Out Date</th>
            </tr>

        </thead>
        <tbody>
            @foreach (var h in hotelBookings)
            {

                if (h.IsCancelled)
                {
                    <tr>
                        <td width="5%">@h.hotelName</td>
                        <td width="5%">@h.RoomType Room</td>
                        <td width="5%">@h.CheckIn.ToString("dd/MM/yyyy")</td>
                        <td width="5%">@h.CheckOut.ToString("dd/MM/yyyy")</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@{
    if (showPayPopup)
    {
        var remainder = totalToPay - currentlyPaid;

        <div class="backgroundPopupBox">
            <div class="popupCreate">
            <h3>Pay Remainder</h3>
                <p>Are you sure you want to pay the remainder of this booking? It will cost you £@remainder </p>
                <button class="btn btn-success" @onclick="() => PayRemainder(bookingId)">Yes</button>
                <button class="btn btn-danger" @onclick="ClosePopup">No</button>
            </div>
        </div>   
    }
}


@code {


    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private List<HotelBookingViewModel>? hotelBookings;
    private string userId;
    private bool disableCancel = false;
    private bool disableModify = false;
    private bool showPayPopup = false;
    private string bookingId;
    private decimal currentlyPaid, totalToPay;


    protected override async Task OnInitializedAsync()
    {

        var authState = await authenticationState;
        var user = authState?.User;
        userId = user?.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        var result = await http.GetFromJsonAsync<List<HotelBookingViewModel>>($"api/bookings/hotel/userbooking?userId={userId}");
        if (result != null)
        {
            hotelBookings = result;
        }
    }

    async Task CancelBooking(string id)
    {
        var result = await http.DeleteAsync($"api/bookings/hotel/{id}");
        NavigationManager.NavigateTo("/mybookings", true);
    }

    private void ModifyBooking(string id)
    {
        NavigationManager.NavigateTo($"/editbooking/hotel/{id}");
    }

    private void ShowPayPopup(string id, decimal depoist, decimal total)
    {
        showPayPopup = true;
        bookingId = id;
        currentlyPaid = depoist;
        totalToPay = total;
    }

    private void PayRemainder(string id)
    {
        var result = http.PutAsync($"api/bookings/hotel/payment/{id}", null);
        NavigationManager.NavigateTo("/mybookings", true);
    }

    private void ClosePopup()
    {
        showPayPopup = false;
    }

}
